name: Linter

on:
  pull_request:
  push:
    branches: [ "main" ]

jobs:
  cpu:
    name: "CPU tests"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]
        python-version: ['3.10']
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install pylint pyink pytype==2024.2.27
    - name: Typecheck the code with pytype
      run: |
        pytype --jobs auto --disable 'import-error,late-directive,wrong-arg-types,module-attr,unsupported-operands' MaxText/ || true
    - name: Analysing the code with pylint in Maxtext/
      run: |
         pylint --disable C0301,C3001,C0114,C0115,C0116,C0200,C0121,C0201,C0206,C0209,C0412,C0415,C2801,E0102,E0606,E1102,E1111,E1123,E1135,E1136,R0401,R1701,R1703,R1710,R1711,R1735,R0917,R1714,R1716,R1719,R1721,R1728,R1728,W0102,W0107,W0201,W0212,W0221,W0237,W0404,W0611,W0612,W0613,W0621,W0622,W0631,W0707,W0718,W1201,W1203,W1309,W1514,W4901 MaxText/ && \
         echo 'Maxtext PyLint check successful' || { echo \
         'PyLint check has failed. Please run bash code_style.sh to fix issues'; exit 20; }
    - name: Analysing the code with pylint in pedagogical_examples/
      run: |
         pylint pedagogical_examples/ && \
         echo 'PyLint check on pedagogical_examples/ is successful' || { echo \
         'PyLint check has failed. Please run bash code_style.sh to fix issues'; exit 20; }
    - name: Analysing the code with pyink in Maxtext/
      run: |
        pyink MaxText --check --diff --color --pyink-indentation=2 --line-length=125 || true
    - name: Analysing the code with pyink in pedagogical_examples/
      run: |
        pyink pedagogical_examples --check --diff --color --pyink-indentation=2 --line-length=125



