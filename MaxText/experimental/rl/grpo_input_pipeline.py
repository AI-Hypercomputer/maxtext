"""
Copyright 2025 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import jax
from jax.sharding import Mesh

import numpy as np
import functools
import datasets
import transformers
import grain.python as grain
from collections.abc import Iterable

from MaxText.input_pipeline import input_pipeline_interface
from MaxText.input_pipeline import _input_pipeline_utils


class SingleHostDataLoader:

  def __init__(self, dataloader: grain.DataLoader, global_mesh: Mesh):
    self.global_mesh = global_mesh
    self.dataloader = dataloader
    if not isinstance(self.dataloader, Iterable):
      raise ValueError("Type error: dataloader should be an Iterable.")
    self.local_iterator = iter(self.dataloader)

  def reset(self):
    if not isinstance(self.dataloader, Iterable):
      raise ValueError("Type error: dataloader should be a grain.DataLoader.")
    self.local_iterator = iter(self.dataloader)

  def __iter__(self):
    self.reset()
    return self

  def __next__(self):
    local_data = next(self.local_iterator)
    return local_data


def preprocessing_pipeline(
    dataloading_host_index,
    dataloading_host_count,
    global_mesh,
    dataset,
    data_column_names,
    tokenize,
    tokenizer_path,
    hf_access_token,
    global_batch_size,
    max_target_length,
    shuffle: bool = False,
    data_shuffle_seed=0,
    add_bos=True,
    add_eos=True,
    num_threads=1,
    drop_remainder=False,
):
  """GRPO input pipeline for preprocessing HF dataset

  Return an iterator of dataset local to each host.
  """

  if global_batch_size % global_mesh.size != 0:
    raise ValueError("Batch size should be divisible number of global devices.")

  if tokenize:
    tokenizer = transformers.AutoTokenizer.from_pretrained(
        tokenizer_path,
        add_bos_token=add_bos,
        add_eos_token=add_eos,
        model_max_length=max_target_length,
        legacy=False,
        token=hf_access_token,
    )

    dataset = dataset.map(
        _input_pipeline_utils.tokenization,
        batched=True,
        fn_kwargs={
            "hf_tokenizer": tokenizer,
            "truncation": True,
            "max_length": max_target_length - 1,
            "column_names": data_column_names,
        },
    )
  dataset = dataset.select_columns(data_column_names)
  dataset = _input_pipeline_utils.HFDataSource(
      dataset,
      dataloading_host_index,
      dataloading_host_count,
      num_threads,
      False,
      max_target_length,
      data_column_names,
  )

  def lists2array(x):
    """Convert lists/tuples to array"""
    return jax.tree.map(np.asarray, x, is_leaf=lambda y: isinstance(y, (list, tuple)))

  operations = [
      grain.MapOperation(lists2array),
      _input_pipeline_utils.PadOrTrimToMaxLength(max_target_length),
      grain.Batch(batch_size=global_batch_size // jax.process_count(), drop_remainder=drop_remainder),
  ]

  # Since HuggingFace IterableDataset does not support access through index
  # Indexes generated by dummy_index_sampler is not used.
  # dummy_index_sampler is used as an input placeholder for grain.Dataloader
  dummy_index_sampler = grain.IndexSampler(
      num_records=len(dataset),
      num_epochs=1,
      shard_options=grain.ShardOptions(
          shard_index=dataloading_host_index, shard_count=dataloading_host_count, drop_remainder=False
      ),
      shuffle=shuffle,
      seed=data_shuffle_seed,
  )

  dataloader = grain.DataLoader(
      data_source=dataset,
      operations=operations,
      sampler=dummy_index_sampler,
      worker_count=1,  # only supports one worker for now, more workers results in duplicated data
      worker_buffer_size=1,
      read_options=grain.ReadOptions(num_threads=num_threads, prefetch_buffer_size=128),
  )

  # single_host_gen = SingleHostDataLoader(dataloader, global_mesh)
  return iter(dataloader)


def make_hf_train_iterator(
    config,
    global_mesh,
    process_indices_train,
):
  """Load, preprocess dataset and return local iterators"""
  train_ds = datasets.load_dataset(
      config.hf_path,
      data_dir=config.hf_data_dir,
      data_files=config.hf_train_files,
      split="train",
      streaming=True,
      token=config.hf_access_token,
  )
  local_iter = preprocessing_pipeline(
      dataloading_host_index=process_indices_train.index(jax.process_index()),
      dataloading_host_count=len(process_indices_train),
      global_mesh=global_mesh,
      dataset=train_ds,
      data_column_names=[config.train_data_columns],
      tokenize=config.tokenize_train_data,
      tokenizer_path=config.tokenizer_path,
      hf_access_token=config.hf_access_token,
      global_batch_size=config.global_batch_size_to_load,
      max_target_length=config.max_prefill_predict_length,
  )
  return local_iter


def create_data_iterator(config, mesh):
  process_indices_train = input_pipeline_interface.get_process_loading_real_data(
      config.data_sharding,
      config.global_batch_size_to_load,
      config.global_batch_size_to_train_on,
      config.max_target_length,
      mesh,
  )
  if config.eval_interval > 0:
    raise ValueError("GRPO input pipeline is not supported for eval data")
  train_iterator_fn = functools.partial(make_hf_train_iterator, config, mesh, process_indices_train)
  return input_pipeline_interface.make_mixed_iterator(config, mesh, process_indices_train, [], train_iterator_fn, None)
