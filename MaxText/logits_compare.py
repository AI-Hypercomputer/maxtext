# from transformers import AutoModel

# model = AutoModel.from_pretrained("deepseek-ai/DeepSeek-V2-Lite", use_auth_token=True)


"""Check if the logits generated by a model's MaxText implementation matches hf logits for the same inputs"""
import argparse
import sys
import os
from absl import app
from tabulate import tabulate

current_dir = os.path.dirname(os.path.abspath(__file__))
maxtext_parent_dir = os.path.dirname(current_dir)
sys.path.append(maxtext_parent_dir)

import max_logging

max_logging.log(f"Added parent directory = {maxtext_parent_dir}")

import jax
import jax.numpy as jnp
import numpy as np


def main(argv):
  jax.config.update("jax_default_prng_impl", "unsafe_rbg")
  os.environ["TF_CPP_MIN_LOG_LEVEL"] = "0"

  ref_logits = np.load("sglang_ref_i_love_to")
  maxtext_logits = np.load("max_i_love_to_cpu")[0, :, :]

  max_logging.log(f"{ref_logits=}")
  max_logging.log(f"{maxtext_logits=}")

  ref_probabilities = jax.nn.softmax(ref_logits, axis=-1)
  maxtext_probabilities = jax.nn.softmax(maxtext_logits, axis=-1)

  max_logging.log(f"{maxtext_probabilities=}")
  max_logging.log(f"{ref_probabilities=}")

  kl_div = jax.numpy.sum(jax.scipy.special.kl_div(ref_probabilities, maxtext_probabilities), axis=-1)
  max_logging.log(f"KL divergence = {kl_div}, max KL divergence = {jax.numpy.max(kl_div)}")

  metrics = {}
  metrics["max_kl_div"] = jax.numpy.max(kl_div)
  metrics["l1_diff_mean"] = np.abs(ref_logits - maxtext_logits).mean()
  metrics["abs_diff"] = np.abs(ref_logits - maxtext_logits).max()

  ranking_maxtext = np.argsort(maxtext_logits, axis=1)[:, -5:]
  ranking_ref = np.argsort(ref_logits, axis=1)[:, -5:]

  max_logging.log(f"{ranking_maxtext=}")
  max_logging.log(f"{ranking_ref=}")

  breakpoint()

  # for each token, 1 if there is a disagreement in the top 5 of next tokens, 0 otherwise
  metrics["disagreement_top5"] = np.mean((np.abs(ranking_ref - ranking_maxtext) > 0).sum(axis=1) > 0)
  table = [[key, value] for key, value in metrics.items()]
  print(tabulate(table, headers=["Metric", "Value"], tablefmt="orgtbl"))


if __name__ == "__main__":
  app.run(main)